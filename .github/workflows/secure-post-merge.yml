name: SecurePipeline Docker build, ECR push, template copy to S3
on:
  push:
    branches:
      - main

jobs:
  dockerBuildAndPush:
    name: Docker build and push
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-2
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Set up AWS creds #push assets to S3
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.UPLOAD_ASSETS_GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: yarn build assets, zip and sign
        env:
          ZIP_SIGNING_KEY: ${{ secrets.UPLOAD_ASSETS_ZIP_SIGNING_KEY }}
        run: |
          cd ${GITHUB_WORKSPACE} || exit 1
          yarn install
          yarn build
          cp -r ./node_modules/govuk-frontend/govuk/assets ./dist/assets
          zip -r ./public.zip ./dist/public/* ./dist/assets/*
          md5sum ./public.zip | cut -c -32 > zipsum.txt
          aws kms sign --key-id $ZIP_SIGNING_KEY --message fileb://zipsum.txt --signing-algorithm RSASSA_PSS_SHA_256 --message-type RAW --output text --query Signature | base64 --decode > ZipSignature
          zip -r ./package.zip ./public.zip ./ZipSignature

      - name: Push assets and md5sum to S3
        env:
          ARTIFACT_BUCKET: ${{ secrets.UPLOAD_ASSETS_ARTIFACT_SOURCE_BUCKET_NAME }}
        run: |
          aws s3 cp package.zip "s3://$ARTIFACT_BUCKET/package.zip" --metadata "repository=$GITHUB_REPOSITORY,commitsha=$GITHUB_SHA"
          aws s3 cp zipsum.txt "s3://$ARTIFACT_BUCKET/zipsum.txt" --metadata "repository=$GITHUB_REPOSITORY,commitsha=$GITHUB_SHA"

      - name: Set up AWS creds #push to ECR and  do sam deploy
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create tag
        id: create-tag
        run: |
          IMAGE_TAG="${{ github.sha }}-secure-pipeline-$(date +'%Y-%m-%d-%H%M%S')"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.9.0'

      - name: Build, tag, sign and push image to Amazon ECR
        env:
          CONTAINER_SIGN_KEY: ${{ secrets.CONTAINER_SIGN_KMS_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.create-tag.outputs.image_tag }}
        run: |
          cd ${GITHUB_WORKSPACE} || exit 1
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cosign sign --key awskms:///${CONTAINER_SIGN_KEY} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set up SAM cli
        uses: aws-actions/setup-sam@v2

      - name: sam fix https://github.com/aws/aws-sam-cli/issues/4527
        run: $(dirname $(readlink $(which sam)))/pip install --force-reinstall "cryptography==38.0.4"

      - name: SAM Validate
        working-directory: ./deploy
        run: sam validate --region ${{ env.AWS_REGION }}

      - name: SAM Package
        working-directory: ./deploy
        env:
          ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET_NAME }}
        run: sam package --s3-bucket="$ARTIFACT_BUCKET" --output-template-file=cf-template.yaml

      - name: Update SAM template with ECR image
        working-directory: ./deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.create-tag.outputs.image_tag }}
        run: sed -i "s|CONTAINER-IMAGE-PLACEHOLDER|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|" cf-template.yaml

      - name: Compress Template
        working-directory: ./deploy
        run: zip template.zip cf-template.yaml

      - name: Upload Compressed CloudFormation artifacts to S3
        working-directory: ./deploy
        env:
          ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET_NAME }}
        run: aws s3 cp template.zip "s3://$ARTIFACT_BUCKET/template.zip" --metadata "repository=$GITHUB_REPOSITORY,commitsha=$GITHUB_SHA"
