AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  This creates the necessary components to deploy IPV Core Front onto ECS
  Fargate within an existing VPC and private subnets (provided as parameters).
  Core Front can be invoked via the public API Gateway on the url in the
  CoreFrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> private ALB ->
  Core Front ECS Service

  Core Front egress to Core Back's API Gateway is via a NAT Gateway, not created
  here, which should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev.*))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  CodeSigningConfigArn:
    Type: String
    Description: Asserts that lambdas are signed when deployed.
    Default: "none"
  DeploymentStrategy:
    Description: "Predefined deployment configuration for ECS application"
    Type: String
    Default: "None"
    # Allowed values: See https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html
    AllowedValues:
      - None
      - ECSCanary50Percent5Minutes
      - CodeDeployDefault.ECSCanary10Percent5Minutes
      - CodeDeployDefault.ECSCanary10Percent15Minutes
      - CodeDeployDefault.ECSAllAtOnce

Conditions:
  IsDevelopment: !Or
    - !Equals [ !Ref AWS::AccountId, "130355686670"]
    - !Equals [ !Ref AWS::AccountId, "175872367215"]
  IsDev01: !Equals [ !Ref AWS::AccountId, "130355686670"]
  IsDev02: !Equals [ !Ref AWS::AccountId, "175872367215"]
  IsBuild: !Equals [ !Ref AWS::AccountId, "457601271792"]
  IsNotDevelopment: !Not [ !Condition IsDevelopment ]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsSubscriptionEnviroment: !Or
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  UsePermissionsBoundary: !Not
    - !Equals [ !Ref PermissionsBoundary, "none" ]
  UseCodeSigning: !Not
    - !Equals [ !Ref CodeSigningConfigArn, "none" ]
  UseCanaryDeployment: !Or
    - !Condition IsNotDevelopment
    - !Equals [ !Ref Environment, dev-canary ]
  IsPerformanceSensitive: !Or
    - !Not [ !Condition IsDevelopment ]
    - !Equals [ !Ref Environment, "dev-perf" ]

# The AWS Account Id is used in the following mapping section because we have
# multiple developer environments and it is undesirable to have to keep this
# mapping up to date with each developer environment.
Mappings:
  EnvironmentConfiguration:
    "130355686670": # core-dev01
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: true
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: ""
      contactUrl: "https://home.build.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.build.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.dev.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      spotAccountArn: arn:aws:iam::738810260032:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://apps.apple.com/gb/app/gov-uk-id-check/id1629050566"
      iosAppId: "DEV_IOS_APP_ID"
      androidAppId: "DEV_ANDROID_APP_ID"
      androidFingerprint: "DEV_ANDROID_FINGERPRINT"
    "175872367215": # core-dev02
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: true
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: ""
      contactUrl: "https://home.build.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.build.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.dev.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      spotAccountArn: arn:aws:iam::738810260032:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://apps.apple.com/gb/app/gov-uk-id-check/id1629050566"
      iosAppId: "DEV_IOS_APP_ID"
      androidAppId: "DEV_ANDROID_APP_ID"
      androidFingerprint: "DEV_ANDROID_FINGERPRINT"
    "457601271792": # Build
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: true
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: ""
      contactUrl: "https://home.build.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.build.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.build.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      spotAccountArn: arn:aws:iam::429671060046:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://apps.apple.com/gb/app/gov-uk-id-check/id1629050566"
      iosAppId: "N8W395F695.uk.gov.onelogin.build"
      androidAppId: "uk.gov.onelogin.build"
      androidFingerprint: "6E:AA:2A:A0:11:4B:62:EB:34:5E:BA:9D:44:13:85:DC:35:8B:10:60:B3:2B:4B:41:50:9F:E8:B7:FB:3A:DA:B0"
    "335257547869": # Staging
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: true
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: "https://js-cdn.dynatrace.com/jstag/17177a07246/bf01311dte/f728f1a83dd1b716_complete.js"
      contactUrl: "https://home.staging.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.staging.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.staging.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      spotAccountArn: arn:aws:iam::444977453444:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://testflight.apple.com/v1/app/6737052003"
      iosAppId: "N8W395F695.uk.gov.onelogin.staging"
      androidAppId: "uk.gov.onelogin.staging"
      androidFingerprint: "72:77:50:A0:9D:B7:38:46:DD:19:33:A9:4D:59:58:AB:7D:A9:95:CC:5F:A9:77:E5:8C:74:BF:F4:42:EA:43:18"
    "991138514218": # Integration
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: false
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: "https://js-cdn.dynatrace.com/jstag/17177a07246/bf01311dte/952c24127da85c63_complete.js"
      contactUrl: "https://home.integration.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.integration.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.integration.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      spotAccountArn: arn:aws:iam::298945768017:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://apps.apple.com/gb/app/gov-uk-id-check/id1629050566"
      iosAppId: "N8W395F695.uk.gov.onelogin.integration"
      androidAppId: "uk.gov.onelogin.integration"
      androidFingerprint: "25:87:35:1C:E8:5E:D7:72:47:16:82:2D:44:F5:E0:54:C9:7C:2B:82:A3:6A:6C:04:DF:89:17:50:8A:0B:75:AF"
    "075701497069": # Production
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 50
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      languageToggle: true
      useDeviceIntelligence: false
      ga4Disabled: false
      uaDisabled: false
      dtRumUrl: "https://js-cdn.dynatrace.com/jstag/17177a07246/bf04188tda/fa56a4b3a9bbea0_complete.js"
      contactUrl: "https://home.account.gov.uk/contact-gov-uk-one-login"
      deleteAccountUrl: "https://home.account.gov.uk/enter-password?type=deleteAccount"
      logoutUrl: "https://oidc.account.gov.uk/logout"
      templateCaching: true
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      spotAccountArn: arn:aws:iam::101836073728:root
      appStoreUrlAndroid: "https://play.google.com/store/apps/details?id=uk.gov.documentchecking"
      appStoreUrlApple: "https://apps.apple.com/gb/app/gov-uk-id-check/id1629050566"
      iosAppId: "N8W395F695.uk.gov.onelogin"
      androidAppId: "uk.gov.onelogin"
      androidFingerprint: "CC:8D:C5:6D:15:4A:F4:E7:97:B0:1A:68:88:CF:B7:B5:C7:EE:F0:8D:E5:94:D0:BD:BD:24:35:B7:CE:7B:B7:74"
  SecurityGroups:
    PrefixListIds:
      dynamodb: "pl-b3a742da"
      s3: "pl-7ca54015"
  Constants:
    Urls:
      pagerDutyRunbook: "https://team-manual.account.gov.uk/teams/IPV-Core-team/Supporting-IPV-Core/pager-duty-runbooks/"

Resources:

  # ssl cert
  DevSSLCert:
    Type: AWS::CertificateManager::Certificate
    Condition: IsDevelopment
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub "${Environment}.01.dev.identity.account.gov.uk"
        - !Sub "${Environment}.02.dev.identity.account.gov.uk"
      DomainValidationOptions:
        - DomainName: !If
            - IsDev01
            - !Sub "${Environment}.01.dev.identity.account.gov.uk"
            - !Sub "${Environment}.02.dev.identity.account.gov.uk"
          HostedZoneId: !If
            - IsDev01
            - !ImportValue Dev01IdentityHostedZoneId
            - !ImportValue Dev02IdentityHostedZoneId
      ValidationMethod: DNS

  # api domain entries / mapping (intentionally V2 as needs to be that way for prod)
  DevApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: IsDevelopment
    Properties:
      DomainName: !If
        - IsDev01
        - !Sub "${Environment}.01.dev.identity.account.gov.uk"
        - !Sub "${Environment}.02.dev.identity.account.gov.uk"
      DomainNameConfigurations:
        - CertificateArn: !Ref DevSSLCert
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  DevApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: IsDevelopment
    DependsOn: RestApiGwDeployment202502241200
    Properties:
      DomainName: !Ref DevApiDomain
      ApiId: !Ref RestApiGateway
      Stage: !Ref ApiGatewayStage


  # dns rcord
  DevDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsDevelopment
    Properties:
      Type: A
      Name: !Ref DevApiDomain
      HostedZoneId: !If
          - IsDev01
          - !ImportValue Dev01IdentityHostedZoneId
          - !ImportValue Dev02IdentityHostedZoneId
      AliasTarget:
        DNSName: !GetAtt DevApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt DevApiDomain.RegionalHostedZoneId

 # Security Groups for the ECS service and load balancer
  PrivateLoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow vpc cidr ingress to port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  PrivateLoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt PrivateLoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Core Front load balancer and
        the core front ECS security group
      DestinationSecurityGroupId: !GetAtt CoreFrontECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  CoreFrontECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Front ECS Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, dynamodb]
          Description: Allow outbound traffic to dynamodb vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, s3]
          Description: Allow outbound traffic to s3 vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationSecurityGroupId:
            Fn::ImportValue:  !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound traffic to AWS Services vpc endpoint security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  CoreFrontECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Core Front ECS permits inbound from the Core Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt CoreFrontECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt PrivateLoadBalancerSG.GroupId

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    #checkov:skip=CKV_AWS_18: This is the bucket where our access logs go and AWS advise not sending a bucket's access logs to itself.
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3045 # Using a legacy access control setup for now
    Properties:
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: "Enabled"
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  SpotKeysS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub published-did-documents-${Environment}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt S3KmsKey.Arn
              SSEAlgorithm: "aws:kms"
      VersioningConfiguration:
        Status: "Enabled"
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: spot-signing-keys
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  SpotKeysBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SpotKeysS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "s3:*"
            Resource: !Sub "arn:aws:s3:::${SpotKeysS3Bucket}/*"
          - Sid: AllowSpotAccountAccess
            Effect: Allow
            Principal:
              AWS: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - spotAccountArn
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${SpotKeysS3Bucket}/*"

  CoreFrontAccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::652711504416:root
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/core-front-${Environment}/AWSLogs/${AWS::AccountId}/*
          - Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AccessLogsBucket}/*"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
          - Effect: Deny
            Resource:
              - !GetAtt AccessLogsBucket.Arn
              - !Sub "${AccessLogsBucket.Arn}/*"
            Principal: "*"
            Action:
              - "s3:*"
            Condition:
              Bool:
                "aws:SecureTransport": false
              NumericLessThan:
                "s3:TlsVersion": "1.2"

  # Private Application Load Balancer
  PrivateLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt PrivateLoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
      Type: application
      #checkov:skip=CKV_AWS_91:ALB access logging is disabled in developer environments to make them easier to manage.
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.enabled
            Value: true
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.prefix
            Value: !Sub core-front-${Environment}
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: deletion_protection.enabled
            Value: true
          - !Ref AWS::NoValue
    DependsOn: CoreFrontAccessLogsBucketPolicy

  PrivateLoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      # Timeout and interval are non default after lots of tweaking to improve scaleup speed and reduce crashes
      HealthCheckTimeoutSeconds: 14
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      TargetGroupAttributes:
        # AWS suggests setting this higher than the idle timeout of the load balancer (default 60s) to prevent possible 504 errors
        # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-troubleshooting.html#http-502-issues
        - Key: deregistration_delay.timeout_seconds
          Value: 65



  PrivateLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
      DefaultActions:
        - TargetGroupArn: !Ref PrivateLoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service and task definition
  CoreFrontCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  CoreFrontService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CoreFrontCluster
      DeploymentConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - MaximumPercent: 500
          MinimumHealthyPercent: 50
          DeploymentCircuitBreaker:
            Enable: true
            Rollback: true
      DeploymentController:
        Type: !If
          - UseCanaryDeployment
          - CODE_DEPLOY
          - ECS
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 45
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref PrivateLoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt CoreFrontECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
      TaskDefinition: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - !Ref ECSServiceTaskDefinition
    DependsOn:
      - PrivateLoadBalancerListener

  CoreFrontAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 60
      MinCapacity: 4
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CoreFrontAutoScalingPolicy:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CoreFrontAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 45
        ScaleInCooldown: 420
        ScaleOutCooldown: 60

  CoreFrontStepScaleOutPolicy:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CoreFrontStepScalingOutPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30 # The policy will continue to respond to additional alarm breaches,
                     # even while a scaling activity is in progress. This means Application
                     # Auto Scaling will evaluate all alarm breaches as they occur.
                     # A cooldown period is used to protect against over-scaling due to
                     # multiple alarm breaches occurring in rapid succession.
        MinAdjustmentMagnitude: 3
        StepAdjustments:
          - MetricIntervalUpperBound: 20 # 80%
            ScalingAdjustment: 100 # Scale by 100% of containers if the metric is breached
                                   # with <80% utilisation
          - MetricIntervalLowerBound: 20 # 80%
            MetricIntervalUpperBound: 30 # 90%
            ScalingAdjustment: 200 # Scale by 200% of containers if the metric is breached
                                   # with 80-90% utilisation
          - MetricIntervalLowerBound: 30 # 90%
            MetricIntervalUpperBound: 35 # 95%
            ScalingAdjustment: 300 # Scale by 300% of containers if the metric is breached
                                   # with 90-95% utilisation
          - MetricIntervalLowerBound: 35 # 95%
            ScalingAdjustment: 500 # Scale by 500% of containers if the metric is breached
                                   # with >95% utilisation
                                   # Note: CPU can scale greater than 100% in a burst mode
                                   # on Fargate, so leave the upper bound open

  CoreFrontStepScaleInPolicy:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CoreFrontStepScalingInPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 420 # The policy will continue to respond to additional alarm breaches,
                      # even while a scaling activity is in progress. This means Application
                      # Auto Scaling will evaluate all alarm breaches as they occur.
                      # A cooldown period is used to protect against under-scaling due to
                      # multiple alarm breaches occurring in rapid succession.
        StepAdjustments:
          - MetricIntervalUpperBound: -40 # 20%
            ScalingAdjustment: -50 # Scale down 50% of containers if the metric is breached
                                   # with <20% utilisation

  CoreFrontStepScaleOutAlarm:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref CoreFrontStepScaleOutPolicy
      AlarmDescription: "CoreFrontClusterOver60PercentCPU"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: "1"
      Dimensions:
        - Name: ClusterName
          Value: !Ref CoreFrontCluster
        - Name: ServiceName
          Value: !GetAtt CoreFrontService.Name
      Unit: "Percent"
      EvaluationPeriods: "1"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  CoreFrontStepScaleInAlarm:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref CoreFrontStepScaleInPolicy
      AlarmDescription: "CoreFrontClusterUnder60PercentCPU"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: "5"
      Dimensions:
        - Name: ClusterName
          Value: !Ref CoreFrontCluster
        - Name: ServiceName
          Value: !GetAtt CoreFrontService.Name
      Unit: "Percent"
      EvaluationPeriods: "5"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"


  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-CoreFront-ECS
      RetentionInDays: 30

  ECSAccessLogsGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSubscriptionEnviroment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}.execute-api.eu-west-2.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: !Sub IPVCorePrivateAPIGatewayID-${Environment}
                  Environment: !Ref Environment
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "core-front-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: ENABLE_PREVIEW
              Value: !If
                - IsBuild
                - "development"
                - !If [IsDevelopment, "development", !Ref AWS::NoValue]
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: GTM_ID
              Value: !If [ IsProduction, "GTM-TT5HDKV", "GTM-TK92W68" ]
            - Name: GTM_ID_GA4
              Value: !If [ IsProduction, "GTM-K4PBJH3", "GTM-KD86CMZ" ]
            - Name: ANALYTICS_DOMAIN
              Value: !If
                - IsProduction
                - "account.gov.uk"
                - !If
                  - IsDev01
                  - !Sub "${Environment}.01.dev.identity.account.gov.uk"
                  - !If [IsDev02, !Sub "${Environment}.02.dev.identity.account.gov.uk", !Sub "${Environment}.account.gov.uk"]
            - Name: SERVICE_DOMAIN
              Value: !If
                - IsProduction
                - "account.gov.uk"
                - !If
                  - IsDev01
                  - !Sub "${Environment}.01.dev.identity.account.gov.uk"
                  - !If [IsDev02, !Sub "${Environment}.02.dev.identity.account.gov.uk", !Sub "${Environment}.account.gov.uk"]
            - Name: DEVICE_INTELLIGENCE_COOKIE_DOMAIN
              Value: account.gov.uk
            - Name: SERVICE_URL
              Value: !If
                - IsProduction
                - "https://identity.account.gov.uk"
                - !If
                  - IsDev01
                  - !Sub "https://${Environment}.01.dev.identity.account.gov.uk"
                  - !If [IsDev02, !Sub "https://${Environment}.02.dev.identity.account.gov.uk", !Sub "https://identity.${Environment}.account.gov.uk"]
            - Name: SESSION_SECRET
              Value: "no-secret"
            - Name: LANGUAGE_TOGGLE
              Value: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, languageToggle ]
            - Name: USE_DEVICE_INTELLIGENCE
              Value: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, useDeviceIntelligence ]
            - Name: NODE_OPTIONS
              Value: !Join
                - ''
                - - '--max-old-space-size='
                  - !If [ IsPerformanceSensitive, 1792, 384 ]
            - Name: NODE_ENV
              Value: "production"
            - Name: RUM_APPLICATION_ID
              Value: !If [ IsNotDevelopment,
                  Fn::ImportValue: !Sub "AppMonitorId-${Environment}",
                  ""]
            - Name: RUM_ROLE_ARN
              Value: !If [ IsNotDevelopment,
                  Fn::ImportValue: !Sub "CognitoRoleARN-${Environment}",
                  "" ]
            - Name: RUM_COGNITO_POOL
              Value: !If [ IsNotDevelopment,
                  Fn::ImportValue: !Sub "CognitoPoolID-${Environment}",
                  "" ]
            - Name: GA4_DISABLED
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - ga4Disabled
            - Name: UA_DISABLED
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - uaDisabled
            - Name: DT_RUM_URL
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - dtRumUrl
            - Name: CONTACT_URL
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - contactUrl
            - Name: DELETE_ACCOUNT_URL
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - deleteAccountUrl
            - Name: TEMPLATE_CACHING
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - templateCaching
            - Name: LOGOUT_URL
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - logoutUrl
            - Name: APP_STORE_URL_ANDROID
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - appStoreUrlAndroid
            - Name: APP_STORE_URL_APPLE
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - appStoreUrlApple
            - Name: IOS_APP_ID
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - iosAppId
            - Name: ANDROID_APP_ID
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - androidAppId
            - Name: ANDROID_FINGERPRINT
              Value: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - androidFingerprint
          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, dynatraceSecretArn ]
                  - ':DT_TENANT::'
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, dynatraceSecretArn ]
                  - ':DT_TENANTTOKEN::'
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
              - ''
              - - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, dynatraceSecretArn ]
                - ':DT_CONNECTION_POINT::'
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub core-front-${Environment}
      Cpu: !If [ IsPerformanceSensitive, 1024, 256 ]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: !If [ IsPerformanceSensitive, 2048, 512 ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullCoreFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
        - PolicyName: SSMParameterAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/core-front*"

      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: CoreFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt CoreFrontSessionsTable.Arn
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - !GetAtt DynamoDBKmsKey.Arn
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets" #pragma: allowlist secret
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
        - PolicyName: SSMParameterAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/core-front*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  RestDidDocumentResourceS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      Policies:
        - PolicyName: AccessDidS3Document
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: !Sub
                  - "arn:aws:s3:::${BucketName}/did.json"
                  - BucketName: !If
                      - IsSubscriptionEnviroment
                      - !Sub "govuk-one-login-spot-published-keys-${Environment}"
                      - !Sub "published-did-documents-${Environment}"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource: !GetAtt S3KmsKey.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSFatalErrorMetricFilter:
    Condition: IsNotDevelopment
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "ECSFatalerror-message"

  FrontendVitalsMetricEventLoopDelayFilter:
    DependsOn: ECSAccessLogsGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub "FrontendVitalsEventLoopDelay-${AWS::StackName}"
      FilterPattern: '{ $.name = "@govuk-one-login/frontend-vital-signs" }'
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-CoreFront-ECS"
      MetricTransformations:
        - MetricName: !Sub "EventLoopDelay-${AWS::StackName}"
          MetricNamespace: FrontendVitals
          MetricValue: '$.eventLoopDelay'
          Unit: Milliseconds

  FrontendVitalsMetricMaxConcurrentConnectionsFilter:
    DependsOn: ECSAccessLogsGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub "FrontendVitalsMaxConcurrentConnections-${AWS::StackName}"
      FilterPattern: '{ $.name = "@govuk-one-login/frontend-vital-signs" }'
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-CoreFront-ECS"
      MetricTransformations:
        - MetricName: !Sub "MaxConcurrentConnections-${AWS::StackName}"
          MetricNamespace: FrontendVitals
          MetricValue: '$.maxConcurrentConnections'
          Unit: Count

  FrontendVitalsMetricEventLoopUtilizationFilter:
    DependsOn: ECSAccessLogsGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub "FrontendVitalsEventLoopUtilization-${AWS::StackName}"
      FilterPattern: '{ $.name = "@govuk-one-login/frontend-vital-signs" }'
      LogGroupName: !Sub "/aws/ecs/${AWS::StackName}-CoreFront-ECS"
      MetricTransformations:
        - MetricName: !Sub "EventLoopUtilization-${AWS::StackName}"
          MetricNamespace: FrontendVitals
          MetricValue: '$.eventLoopUtilization.utilization'
          Unit: Milliseconds

  #
  # REST API Gateway
  #
  #
  RestApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ipv-core-front-${Environment}-rest
      DisableExecuteApiEndpoint: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  RestApiGwDeployment202502241200:
    DependsOn:
      - RestApiGatewayMethod
      - RestDidDocumentMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApiGateway

  RestApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_59"
            comment: "API should have AuthorizationType if appropriate - this is intentionally public"
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref RestProxyResource
      RestApiId: !Ref RestApiGateway
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: false
        method.request.header.x-forwarded-for: false
        method.request.header.host: false
      Integration:
        Type: HTTP_PROXY
        ConnectionType: VPC_LINK
        ConnectionId: !If
          - IsDevelopment
          - !Ref ApiGatewayVpcLink
          - Fn::ImportValue: !Sub "${VpcStackName}-ApiGatewayVpcLinkId"
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
          integration.request.header.x-forwarded-for: "method.request.header.x-forwarded-for"
          integration.request.header.x-forwarded-host: "method.request.header.host"
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub
          - "http://${LBDNS}/{proxy}"
          - LBDNS: !If
            - IsDevelopment
            - !GetAtt NetworkLoadBalancer.DNSName
            - Fn::ImportValue: !Sub "${VpcStackName}-ApiGatewayVpcLinkTargetNLBDNS"

  RestProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: '{proxy+}'

  RestWellKnownResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !GetAtt RestApiGateway.RootResourceId
      PathPart: ".well-known"

  RestWellKnownDidResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApiGateway
      ParentId: !Ref RestWellKnownResource
      PathPart: "did.json"

  RestDidDocumentMethod:
    Type: AWS::ApiGateway::Method
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_59"
            comment: "API should have AuthorizationType if appropriate - this is intentionally public"
    Properties:
      RestApiId: !Ref RestApiGateway
      ResourceId: !Ref RestWellKnownDidResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
              method.response.header.Cache-Control: true
          ResponseModels:
            application/did+json: Empty
        - StatusCode: "404"
          ResponseModels: {}
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !If
           - IsSubscriptionEnviroment
           - !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/govuk-one-login-spot-published-keys-${Environment}/did.json"
           - !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/published-did-documents-${Environment}/did.json"
        Credentials: !GetAtt RestDidDocumentResourceS3Role.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: "200"
            SelectionPattern: "200"
            ResponseParameters:
              method.response.header.Cache-Control: "'max-age=3600, private'"
          - StatusCode: "404"
            SelectionPattern: ""
            ResponseTemplates:
              application/json: |-
                #set($inputRoot = $input.path('$'))
                {
                    "message": "Not Found"
                }

  RestApiGatewayAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      LogGroupName: !If
        - IsDevelopment
        - !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-CoreFront-REST-API-GW-AccessLogs
        - !Sub /aws/apigateway/${AWS::StackName}-CoreFront-REST-API-GW-AccessLogs
      RetentionInDays: 30

  RestApiGatewayAccessLogsGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSubscriptionEnviroment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref RestApiGatewayAccessLogsGroup

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_120"
            comment: "API should have caching - not for our use case"
    Properties:
      StageName: !Sub ${Environment}
      DeploymentId: !Ref RestApiGwDeployment202502241200
      RestApiId: !Ref RestApiGateway
      AccessLogSetting:
        DestinationArn: !GetAtt RestApiGatewayAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency"
          }
      CacheClusterEnabled: false
      TracingEnabled: true
      Tags:
        - Key: FMSRegionalPolicy
          Value: false

  #
  # Rest api gateway vpc link
  #

  ApiGatewayVpcLink:
    Condition: IsDevelopment
    DependsOn: NetworkLoadBalancerTargetGroup
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Description: Link from REST API Gateway to NetworkLoadBalancer
      Name: !Sub "${AWS::StackName}-ApiVpcLink"
      TargetArns:
        - !Ref NetworkLoadBalancer

  NetworkLoadBalancer:
    Condition: IsDevelopment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: network
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NetworkLoadBalancer"
        - Key: Service
          Value: identity
        - Key: Source
          Value: alphagov/di-ipv-core-front/deploy/template.yaml
    Metadata:
      checkov:
        skip:
          - id: "CKV_AWS_91"
            comment: "ALB access logging is disabled in developer environments to make them easier to manage."

  NetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !If
        - IsDevelopment
        - !Ref NetworkLoadBalancer
        - Fn::ImportValue: !Sub "${VpcStackName}-ApiGatewayVpcLinkTargetNLB"
      Port: 80
      Protocol: TCP

  NetworkLoadBalancerTargetGroup:
    DependsOn: PrivateLoadBalancerListener
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-NLBTarGrp"
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref PrivateLoadBalancer
      TargetType: alb
      HealthCheckEnabled: true
      HealthCheckPath: '/healthcheck'
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NLBTarGrp"
        - Key: Service
          Value: ci/cd
        - Key: Source
          Value: alphagov/di-ipv-core-front/deploy/template.yaml

  ApiGwHttpEndpoint:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub ipv-core-front-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref PrivateLoadBalancerListener
      PayloadFormatVersion: "1.0"

  APIGWRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: "ANY /{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency"
          }

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    # checkov:skip=CKV_AWS_158: No need for customer managed keys for short lived logs
    Properties:
      LogGroupName: !If
        - IsDevelopment
        - !Sub /aws/vendedlogs/apigateway/${AWS::StackName}-CoreFront-API-GW-AccessLogs
        - !Sub /aws/apigateway/${AWS::StackName}-CoreFront-API-GW-AccessLogs
      RetentionInDays: 30

  APIGWAccessLogsGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSubscriptionEnviroment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  APIGWFatalErrorMetricFilter:
    Condition: IsNotDevelopment
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref APIGWAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "APIGWFatalerror-message"

  CoreFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "core-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"

  S3KmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: !FindInMap
                - EnvironmentConfiguration
                - !Ref AWS::AccountId
                - spotAccountArn
            Action:
              - "kms:GenerateDataKey"
              - "kms:Decrypt*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "s3.${AWS::Region}.amazonaws.com"

####################################################################
#                                                                  #
# Monitoring & Alerts                                              #
#                                                                  #
####################################################################

  FrontLoadBalancer5xxErrors:
    # This is monitoring 5XXs originating from the load balancer, and not from the target group
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: FrontLoadBalancer5xxAlarm
      AlarmDescription: !Sub
        - 'The Elastic Load Balancer (ELB) in front of core-front has returned 2 or more 500 errors in a 5 minute period, for 2 periods in a row. See runbook: ${RunbookUrl}'
        - RunbookUrl: !FindInMap [ Constants, Urls, pagerDutyRunbook]
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      InsufficientDataActions: []
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lb500ErrorLimit ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-5xx-Errors
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_ELB_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lb500ErrorWindow ]
            Stat: Sum

  FrontTargetGroup5xxErrors:
    # This is monitoring 5XXs originating from the target group, and not from the load balancer
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: FrontTargetGroup5xxAlarm
      AlarmDescription: !Sub
        - 'The targets of the ELB in front of core-front have returned a 500 error more than 50 times in a 5 minute period, for 2 periods in a row. See runbook: ${RunbookUrl}'
        - RunbookUrl: !FindInMap [ Constants, Urls, pagerDutyRunbook]
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      InsufficientDataActions: []
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, tg500ErrorLimit ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-5xx-Errors
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_Target_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, tg500ErrorWindow ]
            Stat: Sum

  FrontTargetGroup5xxPercentErrors:
    # This is used by the canary deployment stack
    Type: AWS::CloudWatch::Alarm
    Condition: UseCanaryDeployment
    Properties:
      AlarmName: FrontTargetGroup5xxPercentAlarm
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the
        target group is greater than 5% of all traffic.
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
      - Id: e1
        Label: ErrorPercent
        ReturnData: true
        Expression: (m1/m2)*100
      - Id: m1
        ReturnData: false
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: HTTPCode_Target_5XX_Count
            Dimensions:
              - Name: LoadBalancer
                Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
          Period: 60
          Stat: Sum
      - Id: m2
        ReturnData: false
        MetricStat:
          Metric:
            Namespace: AWS/ApplicationELB
            MetricName: RequestCount
            Dimensions:
            - Name: LoadBalancer
              Value: !GetAtt PrivateLoadBalancer.LoadBalancerFullName
          Period: 60
          Stat: Sum

  FrontRestApiGateway5XXErrorAlarm:
    # This is monitoring all 5XXs returned by the frontend REST API gatway.
    # This will be a combination of load balancer and target group 5XXs.
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FrontRestApiGateway5XXErrorAlarm"
      AlarmDescription: !Sub
        - 'Trigger the alarm if errors exceed 10% with a minimum of 50 invocations, in 2 out of the last 5 minutes. See runbook: ${RunbookUrl}'
        - RunbookUrl: !FindInMap [ Constants, Urls, pagerDutyRunbook]
      ActionsEnabled: true
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 10
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: Threshold error percentage
          ReturnData: true
          Expression: IF(invocations<50,0,errorPercentage)
        - Id: invocations
          Label: Invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref RestApiGateway
            Period: 60
            Stat: Sum
        - Id: errors
          Label: Errors
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref RestApiGateway
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (errors/invocations) * 100

  LambdaInvocationsOutOfSync:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub LambdaInvocationsOutOfSync-${Environment}
      ActionsEnabled: False
      EvaluationPeriods: 6
      DatapointsToAlarm: 6
      Threshold: 0
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: r1
          Label: LambdasOutOfSync
          ReturnData: true
          Expression: c1 + c2 + c3 + c4 + c5
        - Id: c1
          Label: IdentitiesBuiltPerSessionStart
          ReturnData: false
          Expression: IF(l1 > 0 && l2 > 0, IF(l1/l2 > 0.2, 0, -1), 0) # l1 +20% of l2
        - Id: c2
          Label: OAuthResponseBuiltPerIdentitiesBuilt
          ReturnData: false
          Expression: IF(l3 - l1 > 3, -1, IF(l1 - l3 > 3, -1, 0)) # l1 and l3 +- 3
        - Id: c3
          Label: OAuthResponseBuiltPerClientAccessTokensIssued
          ReturnData: false
          Expression: IF(l3 - l4 > 3, -1, IF(l4 - l3 > 3, -1, 0)) # l3 and l4 +- 3
        - Id: c4
          Label: CriOAuthResponseBuiltPerCriSelected
          ReturnData: false
          Expression: IF(l6 > 0 && l5 > 0, IF( l6/l5 < 0.8, -1, IF( l5/l6 < 0.8, -1, 0)), 0) # l6 and l5 +-20%
        - Id: c5
          Label: InitialiseIPVSessionPerCheckExistingIdentity
          ReturnData: false
          Expression: IF( l2 > 0 && l7 > 0, IF( l2/l7 < 0.8, -1, IF( l7/l2 < 0.8, -1, 0)), 0) # l2 and l7 +- 20%
        - Id: l1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-user-identity-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub initialise-ipv-session-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l3
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-client-oauth-response-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l4
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub issue-client-access-token-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l5
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub select-cri-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l6
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-cri-oauth-request-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l7
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub check-existing-identity-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum

  FatalErrorAlarm:
    Condition: IsNotDevelopment
    DependsOn:
      - "ECSFatalErrorMetricFilter"
      - "APIGWFatalErrorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FatalErrorAlarm"
      AlarmDescription: "Trigger an alarm when Fatal Error occurs"
      ActionsEnabled: true
      OKActions:
        - !ImportValue alarm-alerts-topic
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      InsufficientDataActions: []
      MetricName: FatalErrorMessage
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: []
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  FELatencyAlarmP95:
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELatencyAlarmP95"
      AlarmDescription: Trigger the alarm if less than 95% of requests has a latency of less than 1 second with a minimum of 25 invocations in 2 out of the last 5 minutes
      ActionsEnabled: true
      OKActions:
        - !ImportValue alarm-alerts-topic
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<25,0,latency95Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency95Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p95

  FELatencyAlarmP99:
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELatencyAlarmP99"
      AlarmDescription: Trigger the alarm if less than 99% of requests has a latency of less than 2.5 second with a minimum of 150 invocations in 2 out of the last 5 minutes
      ActionsEnabled: true
      OKActions:
        - !ImportValue alarm-alerts-topic
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      InsufficientDataActions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 2500
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<150,0,latency99Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency99Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p99

  FELowContainerTaskCountAlarm:
    Condition: IsProduction
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELowContainerTaskCountAlarm"
      AlarmDescription: Trigger a warning if the running container task count drops below 2
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      InsufficientDataActions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: RunningTaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref CoreFrontCluster
                - Name: ServiceName
                  Value: !GetAtt CoreFrontService.Name
            Period: 60
            Stat: Minimum

  FELowContainerTaskCountCriticalAlarm:
    Condition: IsNotDevelopment
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELowContainerTaskCountCriticalAlarm"
      AlarmDescription: Trigger a critical alert if the running container task count drops below 1
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue alarm-alerts-topic
      InsufficientDataActions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: RunningTaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref CoreFrontCluster
                - Name: ServiceName
                  Value: !GetAtt CoreFrontService.Name
            Period: 60
            Stat: Maximum

  ECSBlueGreenDeploymentStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseCanaryDeployment
    Properties:
      TemplateURL: "https://template-storage-templatebucket-1upzyw6v9cs42.s3.eu-west-2.amazonaws.com/ecs-canary-deployment/template.yaml?versionId=9vFjXAXebnhiAago1o4zhHXwEGHub7ps" # v2.0.2
      Parameters:
        ECSClusterName: !Ref CoreFrontCluster
        ECSServiceName: !GetAtt CoreFrontService.Name
        TargetGroupName: !GetAtt PrivateLoadBalancerListenerTargetGroupECS.TargetGroupName
        LoadBalancerListenerARN: !Ref PrivateLoadBalancerListener
        ECSServiceTaskDefinition: !Ref ECSServiceTaskDefinition
        DeploymentStrategy: !Ref DeploymentStrategy
        VpcId: !Sub ${VpcStackName}-VpcId
        ContainerName: app
        ContainerPort: 8080
        CloudWatchAlarms: !Ref FrontTargetGroup5xxPercentErrors
        PermissionsBoundary: !If
          - UsePermissionsBoundary
          - !Ref PermissionsBoundary
          - none
        CodeSigningConfigArn: !If
          - UseCodeSigning
          - !Ref CodeSigningConfigArn
          - !Ref AWS::NoValue

Outputs:
  CoreFrontUrl:
    Description: >-
      The API Gateway URL which Core Front can be invoked on.
    Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
  IPVCoreFrontGatewayID:
    Description: Core Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-IPVCoreFrontGatewayID"
    Value: !Ref ApiGwHttpEndpoint
  IPVCoreFrontRestGatewayID:
    Condition: IsNotDevelopment
    Description: Core Front Rest API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-IPVCoreFrontRestGatewayID"
    Value: !Ref RestApiGateway
  IPVCoreFrontRestGatewayStage:
    Condition: IsNotDevelopment
    Description: Core Front Rest API Gateway Stage
    Export:
      Name: !Sub "${AWS::StackName}-IPVCoreFrontRestGatewayStage"
    Value: !Ref ApiGatewayStage
