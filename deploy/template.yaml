AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  This creates the necessary components to deploy IPV Core Front onto ECS
  Fargate within an existing VPC and private subnets (provided as parameters).
  Core Front can be invoked via the public API Gateway on the url in the
  CoreFrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> private ALB ->
  Core Front ECS Service

  Core Front egress to Core Back's API Gateway is via a NAT Gateway, not created
  here, which should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev.*))
  ImageTag:
    Description: The tag of core-front image to deploy in the task definition.
    Type: String
    Default: "none"
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  CidrBlock:
    Description: >
      The CIDR block that defines the IP range that the VPC will use. Defaults
      to 10.0.0.0/16 and there is no specific reason to change this unless you
      have multiple VPCs that are going to be peered or connected via a Transit
      Gateway. Must be a /16.
    Type: "String"
    Default: "10.120.128.0/24"
    AllowedPattern: "([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/24)?"

Conditions:
  IsDevelopment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "staging"]
      - !Equals [ !Ref Environment, "integration"]
      - !Equals [ !Ref Environment, "production"]
  IsNotDevelopment: !Not [ !Condition IsDevelopment ]
  IsProduction: !Equals [ !Ref Environment, production ]

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

# The AWS Account Id is used in the following mapping section because we have
# multiple developer environments and it is undesirable to have to keep this
# mapping up to date with each developer environment.
Mappings:
  EnvironmentConfiguration:
    "130355686670": # Development
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      fargateCPUsize: "256"
      fargateRAMsize: "512"
      nodeOldSpaceLimit: "384"
      desiredTaskCount: 1
      subdomain: ".dev"
    "457601271792": # Build
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      fargateCPUsize: "256"
      fargateRAMsize: "512"
      nodeOldSpaceLimit: "256"
      desiredTaskCount: 1
      subdomain: ".build"
    "335257547869": # Staging
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      fargateCPUsize: "256"
      fargateRAMsize: "512"
      nodeOldSpaceLimit: "256"
      desiredTaskCount: 1
      subdomain: ".staging"
    "991138514218": # Integration
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 10
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      fargateCPUsize: "512"
      fargateRAMsize: "1024"
      nodeOldSpaceLimit: "768"
      desiredTaskCount: 1
      subdomain: ".integration"
    "075701497069": # Production
      lb500ErrorLimit: 2
      lb500ErrorWindow: 300
      tg500ErrorLimit: 50
      tg500ErrorWindow: 300
      lambdaInvokeCompareWindow: 300
      fargateCPUsize: "1024"
      fargateRAMsize: "2048"
      nodeOldSpaceLimit: "1792"
      desiredTaskCount: 2
      subdomain: ""
  SecurityGroups:
    PrefixListIds:
      dynamodb: "pl-b3a742da"
      s3: "pl-7ca54015"
  SubnetZoneIds:
    eu-west-2:
      "a": "euw2-az1"
      "b": "euw2-az2"
      "c": "euw2-az3"
Resources:

 # Security Groups for the ECS service and load balancer
  PublicLoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: Allow port 443 access from anywhere
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          Description: Allow port 80 access from anywhere
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  PublicLoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt PublicLoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Core Front load balancer and
        the core front ECS security group
      DestinationSecurityGroupId: !GetAtt CoreFrontECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  CoreFrontECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Core Front ECS Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, dynamodb]
          Description: Allow outbound traffic to dynamodb vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationPrefixListId: !FindInMap [SecurityGroups, PrefixListIds, s3]
          Description: Allow outbound traffic to s3 vpc endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - DestinationSecurityGroupId: !If
            - IsNotDevelopment
            - Fn::ImportValue:  !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
            - !ImportValue InterfaceVpcEndpointSecurityGroupId
          Description: Allow outbound traffic to AWS Services vpc endpoint security group
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupIngress:
        - CidrIp:
            Fn::ImportValue: !Sub ${VpcStackName}-VpcCidr
          Description: Allow inbound traffic from vpc cidr to port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  CoreFrontECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Core Front ECS permits inbound from the Core Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt CoreFrontECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt PublicLoadBalancerSG.GroupId

# WAF
  WAFv2ACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: { }
      Scope: REGIONAL
      Rules:
        # Optional rule set to restrict to GDS IP addresses.
        # See WAFv2GDSIPSet resource further on.
        - Name: GDSIPs
          Action:
            Allow: { }
          Priority: 10
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt WAFv2GDSIPSet.Arn
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-WAFGDSIPhits"
            SampledRequestsEnabled: FALSE
        - Name: AWS-AWMManagedRuleCommonRuleSet
          OverrideAction:
            None: { }
          Priority: 20
          Statement:
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesCommonRuleSet
              VendorName: AWS
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-AWSCRShits"
            SampledRequestsEnabled: FALSE
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 30
          OverrideAction:
            None: { }
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            CloudWatchMetricsEnabled: TRUE
            MetricName: !Sub "${AWS::StackName}-AWSKBIhits"
            SampledRequestsEnabled: FALSE
      VisibilityConfig:
        CloudWatchMetricsEnabled: TRUE
        MetricName: !Sub "${AWS::StackName}-WAFv2hits"
        SampledRequestsEnabled: FALSE
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WAFv2"
        - Key: Service
          Value: "IPV Core"

  # The IP address blocks below are referenced from here:
  # https://sites.google.com/a/digital.cabinet-office.gov.uk/gds/working-at-gds/gds-internal-it/gds-internal-it-network-public-ip-addresses
  WAFv2GDSIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Addresses:
        - "213.86.153.211/32"
        - "213.86.153.212/32"
        - "213.86.153.213/32"
        - "213.86.153.214/32"
        - "213.86.153.231/32"
        - "213.86.153.235/32"
        - "213.86.153.236/32"
        - "213.86.153.237/32"
        - "85.133.67.244/32"
        - "51.149.8.0/25"
        - "51.149.8.128/29"
      IPAddressVersion: IPV4
      Scope: REGIONAL
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WAFv2GDSIPSet"
        - Key: Service
          Value: "IPV Core"
  WAFv2ACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref PublicLoadBalancer
      WebACLArn: !GetAtt WAFv2ACL.Arn

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    #checkov:skip=CKV_AWS_18: This is the bucket where our access logs go and AWS advise not sending a bucket's access logs to itself.
    Properties:
      BucketName: !Sub ipv-core-${Environment}-access-logs
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CoreFrontAccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::652711504416:root
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/core-front-${Environment}/AWSLogs/${AWS::AccountId}/*
          - Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AccessLogsBucket}/*"
            Condition:
              StringEquals:
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
          - Effect: Deny
            Resource:
              - !GetAtt AccessLogsBucket.Arn
              - !Sub "${AccessLogsBucket.Arn}/*"
            Principal: "*"
            Action:
              - "s3:*"
            Condition:
              Bool:
                "aws:SecureTransport": false
              NumericLessThan:
                "s3:TlsVersion": "1.2"

  # Route 53 domain alias
  PublicLoadBalancerDomainAlias:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        EvaluateTargetHealth: true #for now
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
      SetIdentifier: "PublicLoadBalancerRecordset"
      HostedZoneName: !Join
        - ""
        - - "identity"
          - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
          - ".account.gov.uk."
      Name: !Join
        - ""
        - - !If
            - IsDevelopment
            - !Sub "${Environment}."
            - !Ref AWS::NoValue
          - "identity"
          - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
          - ".account.gov.uk"
      Type: "A"
      Region: !Ref "AWS::Region"

  # Public subnets for load balancer

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [ SubnetZoneIds, !Ref AWS::Region, "a" ]
      CidrBlock: !Select [ 4, !Cidr [ !Ref CidrBlock, 6, 5 ] ]
      MapPublicIpOnLaunch: true
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetA"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "alphagov/di-ipv-core-front/deploy/template.yaml"

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRouteTableA"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "alphagov/di-ipv-core-front/deploy/template.yaml"

  RouteTableAssociationForPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

  InternetRoutePublicSubnetA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: "igw-054f65273cb50cd73"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [ SubnetZoneIds, !Ref AWS::Region, "b" ]
      CidrBlock: !Select [ 5, !Cidr [ !Ref CidrBlock, 6, 5 ] ]
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetB"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "di-ipv-core-front/deploy/template.yaml"

  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRouteTableB"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "alphagov/di-ipv-core-front/deploy/template.yaml"

  RouteTableAssociationForPublicSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

  InternetRoutePublicSubnetB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: "igw-054f65273cb50cd73"

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZoneId: !FindInMap [ SubnetZoneIds, !Ref AWS::Region, "c" ]
      CidrBlock: !Select [ 3, !Cidr [ !Ref CidrBlock, 6, 5 ] ]
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicSubnetC"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "di-ipv-core-front/deploy/template.yaml"

  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-PublicRouteTableC"
        - Key: "Service"
          Value: "IPV Core"
        - Key: "Source"
          Value: "alphagov/di-ipv-core-front/deploy/template.yaml"

  RouteTableAssociationForPublicSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      SubnetId: !Ref PublicSubnetC

  InternetRoutePublicSubnetC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: "igw-054f65273cb50cd73"

  # Public Application Load Balancer
  PublicLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt PublicLoadBalancerSG.GroupId
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Type: application
      #checkov:skip=CKV_AWS_91:ALB access logging is disabled in developer environments to make them easier to manage.
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.enabled
            Value: true
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: access_logs.s3.prefix
            Value: !Sub core-front-${Environment}
          - !Ref AWS::NoValue
        - !If
          - IsNotDevelopment
          - Key: deletion_protection.enabled
            Value: true
          - !Ref AWS::NoValue
    DependsOn: CoreFrontAccessLogsBucketPolicy

  PublicLoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  PublicLBCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join
        - ""
        - - !If
            - IsDevelopment
            - !Sub "${Environment}."
            - !Ref AWS::NoValue
          - "identity"
          - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
          - ".account.gov.uk"
      SubjectAlternativeNames:
        - !Join
          - ""
          - - !If
              - IsDevelopment
              - !Sub "${Environment}."
              - !Ref AWS::NoValue
            - "api.identity"
            - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
            - ".account.gov.uk"
      DomainValidationOptions:
        - DomainName: !Join
          - ""
          - - !If
              - IsDevelopment
              - !Sub "${Environment}."
              - !Ref AWS::NoValue
            - "identity"
            - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
            - ".account.gov.uk"
          HostedZoneId: !ImportValue PublicHostedZoneId
        - DomainName: !Join
            - ""
            - - !If
                - IsDevelopment
                - !Sub "${Environment}."
                - !Ref AWS::NoValue
              - "api.identity"
              - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, subdomain ]
              - ".account.gov.uk"
          HostedZoneId: !ImportValue PublicHostedZoneId
      ValidationMethod: DNS

  PublicLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
      # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
      DefaultActions:
        - TargetGroupArn: !Ref PublicLoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref PublicLBCertificate

  # ECS cluster, service and task definition
  CoreFrontCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  CoreFrontService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref CoreFrontCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      DesiredCount: !FindInMap
        - EnvironmentConfiguration
        - !Ref AWS::AccountId
        - desiredTaskCount
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref PublicLoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt CoreFrontECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
            - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
      TaskDefinition: !Ref ECSServiceTaskDefinition
    DependsOn:
      - PublicLoadBalancerListener

  CoreFrontAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CoreFrontAutoScalingPolicy:
    DependsOn: CoreFrontAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CoreFrontAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref CoreFrontCluster
          - !GetAtt CoreFrontService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70
        ScaleInCooldown: 300
        ScaleOutCooldown: 60


  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-CoreFront-ECS
      RetentionInDays: 14
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ECSAccessLogsGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !If [
              IsNotDevelopment,
              CONTAINER-IMAGE-PLACEHOLDER,
              !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/core-front-development:${ImageTag}",
            ] # Uses build account and ECR when not in development.
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !Sub
                - "https://${APIGatewayId}.execute-api.eu-west-2.amazonaws.com/${Environment}"
                - APIGatewayId:
                    Fn::ImportValue: !Sub IPVCorePrivateAPIGatewayID-${Environment}
                  Environment: !Ref Environment
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "core-front-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !Ref PublicLoadBalancerDomainAlias
            - Name: GTM_ID
              Value: !If [ IsProduction, "GTM-TT5HDKV", "GTM-TK92W68" ]
            - Name: ANALYTICS_DOMAIN
              Value: !If [ IsProduction, "account.gov.uk", !Sub "${Environment}.account.gov.uk" ]
            - Name: SESSION_SECRET
              Value: "no-secret"
            - Name: NODE_OPTIONS
              Value: !Join
                - ''
                - - '--max-old-space-size='
                  - !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, nodeOldSpaceLimit ]
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub core-front-${Environment}
      Cpu: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, fargateCPUsize ]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, fargateRAMsize ]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullCoreFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: CoreFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt CoreFrontSessionsTable.Arn
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - !GetAtt DynamoDBKmsKey.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  # Create the VPC Link to join the API Gateway to the
  # private Load Balancer in front of Core Front ECS
  # Service.
  # VPC Link moved to the ip dev platform vpc
  # This is only used for the dev environment
  VpcLink:
    Type: "AWS::ApiGatewayV2::VpcLink"
    Condition: IsDevelopment
    Properties:
      Name: ApiGwVpcLinkToLoadBalancer
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      SecurityGroupIds: []

# ApiGwHttpEndpoint:
#   Type: "AWS::ApiGatewayV2::Api"
#   Properties:
#     Name: !Sub ipv-core-front-${Environment}
#     ProtocolType: HTTP

#  ApiGwHttpEndpointIntegration:
#    Type: "AWS::ApiGatewayV2::Integration"
#    Properties:
#      ApiId: !Ref ApiGwHttpEndpoint
#      IntegrationType: HTTP_PROXY
#      ConnectionId: !If
#        - IsDevelopment
#        - !Ref VpcLink
#        - Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
#      ConnectionType: VPC_LINK
#      IntegrationMethod: ANY
#      IntegrationUri: !Ref PrivateLoadBalancerListener
#      PayloadFormatVersion: "1.0"
#
#  APIGWRoute:
#    Type: "AWS::ApiGatewayV2::Route"
#    Properties:
#      ApiId: !Ref ApiGwHttpEndpoint
#      RouteKey: "ANY /{proxy+}"
#      Target: !Join
#        - /
#        - - integrations
#          - !Ref ApiGwHttpEndpointIntegration
#
#  APIStageDefault:
#    Type: "AWS::ApiGatewayV2::Stage"
#    Properties:
#      ApiId: !Ref ApiGwHttpEndpoint
#      StageName: $default
#      AutoDeploy: true
#      AccessLogSettings:
#        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
#        Format: >-
#          {
#          "requestId":"$context.requestId",
#          "ip": "$context.identity.sourceIp",
#          "requestTime":"$context.requestTime",
#          "httpMethod":"$context.httpMethod",
#          "path": "$context.path",
#          "routeKey":"$context.routeKey",
#          "status":"$context.status",
#          "protocol":"$context.protocol",
#          "responseLength":"$context.responseLength",
#          "responseLatency":"$context.responseLatency"
#          }
#
#  APIGWAccessLogsGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-CoreFront-API-GW-AccessLogs
#      RetentionInDays: 14
#      KmsKeyId: !GetAtt LoggingKmsKey.Arn
#
#  APIGWAccessLogsGroupSubscriptionFilter:
#    Type: AWS::Logs::SubscriptionFilter
#    Condition: IsNotDevelopment
#    Properties:
#      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
#      FilterPattern: ""
#      LogGroupName: !Ref APIGWAccessLogsGroup

  CoreFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "core-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DynamoDBKmsKey.Arn

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  DynamoDBKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              StringEquals:
                "kms:CallerAccount": !Sub "${AWS::AccountId}"
                "kms:ViaService":
                  - "dynamodb.amazonaws.com"
                  - "ecs-tasks.amazonaws.com"

  FrontLoadBalancer5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: FrontLoadBalancer5xxAlarm
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      InsufficientDataActions: [ ]
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lb500ErrorLimit ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-5xx-Errors
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_ELB_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lb500ErrorWindow ]
            Stat: Sum

  FrontTargetGroup5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: FrontTargetGroup5xxAlarm
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue sns-topics-AlarmTopic
      OKActions:
        - !ImportValue sns-topics-AlarmTopic
      InsufficientDataActions: [ ]
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, tg500ErrorLimit ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: Sum-of-5xx-Errors
          ReturnData: true
          Expression: SUM(METRICS())
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_Target_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, tg500ErrorWindow ]
            Stat: Sum

  ### Lambda metrics with session ID as dimension
  #LambdaInvocationsBySessId:
  #  Type: AWS::Logs::LogGroup
  #  Properties:
  #    RetentionInDays: 90
  #    LogGroupName: !Sub LambdaInvocationsBySessId-${Environment}
  LambdaInvocationsOutOfSync:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub LambdaInvocationsOutOfSync-${Environment}
      ActionsEnabled: False
      EvaluationPeriods: 6
      DatapointsToAlarm: 6
      Threshold: 0
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: r1
          Label: LambdasOutOfSync
          ReturnData: true
          Expression: c1 + c2 + c3 + c4 + c5
        - Id: c1
          Label: IdentitiesBuiltPerSessionStart
          ReturnData: false
          Expression: IF(l1 > 0 && l2 > 0, IF(l1/l2 > 0.2, 0, -1), 0) # l1 +20% of l2
        - Id: c2
          Label: OAuthResponseBuiltPerIdentitiesBuilt
          ReturnData: false
          Expression: IF(l3 - l2 > 3, -1, IF(l2 - l3 > 3, -1, 0)) # l2 and l3 +- 3
        - Id: c3
          Label: OAuthResponseBuiltPerClientAccessTokensIssued
          ReturnData: false
          Expression: IF(l3 - l4 > 3, -1, IF(l4 - l3 > 3, -1, 0)) # l3 and l4 +- 3
        - Id: c4
          Label: CriOAuthResponseBuiltPerCriSelected
          ReturnData: false
          Expression: IF(l6 > 0 && l5 > 0, IF( l6/l5 < 0.8, -1, IF( l5/l6 < 0.8, -1, 0)), 0) # l6 and l5 +-20%
        - Id: c5
          Label: InitialiseIPVSessionPerCheckExistingIdentity
          ReturnData: false
          Expression: IF( l2 > 0 && l7 > 0, IF( l2/l7 < 0.8, -1, IF( l7/l2 < 0.8, -1, 0)), 0) # l2 and l7 +- 20%
        - Id: l1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-user-identity-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub initialise-ipv-session-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l3
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-client-oauth-response-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l4
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub issue-client-access-token-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l5
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub select-cri-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l6
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub build-cri-oauth-request-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum
        - Id: l7
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub check-existing-identity-${Environment}
            Period: !FindInMap [ EnvironmentConfiguration, !Ref AWS::AccountId, lambdaInvokeCompareWindow ]
            Stat: Sum


  BuildClientOAuthResponseInvocationsBySessId:
    Type: AWS::Logs::MetricFilter
    Properties:
      #FilterName: !Sub BuildClientOAuthResponseInvocationsBySessId-${Environment}
      FilterPattern: "{ $.ipvSessionId = \"*\" }"
      LogGroupName: "/aws/lambda/build-client-oauth-response-dev-tobys"
      MetricTransformations:
        - DefaultValue: 0
          MetricName: !Sub BuildClientOAuthResponseInvocationsBySessIdMetric-${Environment}
          MetricNamespace: !Sub InvocationsBySessId-${Environment}
          MetricValue: 1
          Unit: Count

Outputs:
  CoreFrontUrl:
    Description: >-
      The LoadBalancer URL which Core Front can be invoked on.
    Value: !Ref PublicLoadBalancerDomainAlias
  #IPVCoreFrontGatewayID:
  #  Description: Core Front API Gateway ID
  #  Export:
  #    Name: !Sub "${AWS::StackName}-IPVCoreFrontGatewayID"
  #  Value: !Ref ApiGwHttpEndpoint
